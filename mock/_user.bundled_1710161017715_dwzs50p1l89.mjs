// mock/user.ts
var user_default = [
  {
    // 获取用户信息的接口
    url: "/mock/api/getUserInfo",
    method: "post",
    response: ({ body }) => {
      if (body.accessToken === "dawei") {
        return {
          code: 0,
          message: "\u767B\u5F55\u6210\u529F",
          data: {
            username: "dawei",
            roles: ["admin"],
            accessToken: "dawei"
          }
        };
      } else if (body.accessToken === "common") {
        return {
          code: 0,
          message: "\u767B\u5F55\u6210\u529F",
          data: {
            username: "common",
            roles: ["common"],
            accessToken: "common"
          }
        };
      } else {
        return {
          code: 1,
          message: "Token\u5931\u6548",
          data: {
            username: "",
            roles: [],
            accessToken: ""
          }
        };
      }
    }
  },
  {
    url: "/mock/api/login",
    method: "post",
    response: ({ body }) => {
      if (body.username !== body.password) {
        return {
          code: 1,
          message: "\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF",
          data: {
            username: "",
            roles: [],
            accessToken: ""
          }
        };
      }
      if (body.username === "admin") {
        return {
          code: 0,
          message: "\u767B\u9646\u6210\u529F",
          data: {
            username: "admin",
            roles: ["admin"],
            accessToken: "admin"
          }
        };
      } else {
        return {
          code: 0,
          message: "token\u5931\u6548",
          data: {
            username: "",
            roles: [],
            accessToken: ""
          }
        };
      }
    }
  },
  {
    // 获取用户列表的接口
    url: "/mock/api/getUserList",
    method: "get",
    response: () => {
      return {
        code: 0,
        message: "\u83B7\u53D6\u6210\u529F",
        data: [
          {
            id: 1,
            nickName: "\u5F20\u4E09",
            userName: "\u5F20\u4E09",
            role: [
              {
                role: 1,
                roleName: "\u7BA1\u7406\u5458"
              },
              {
                role: 2,
                roleName: "\u666E\u901A\u7528\u6237"
              }
            ]
          },
          {
            id: 2,
            nickName: "\u674E\u56DB",
            userName: "\u674E\u56DB",
            role: [
              {
                role: 1,
                roleName: "\u7BA1\u7406\u5458"
              }
            ]
          },
          {
            id: 3,
            nickName: "\u738B\u4E94",
            userName: "\u738B\u4E94",
            role: [
              {
                role: 2,
                roleName: "\u666E\u901A\u7528\u6237"
              }
            ]
          }
        ]
      };
    }
  }
];
export {
  user_default as default
};
//# sourceMappingURL=data:application/json;base64,
